<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonADDToDoList" xml:space="preserve">
    <value>➕ Add list</value>
  </data>
  <data name="ButtonLanguage" xml:space="preserve">
    <value>🌐 Language</value>
  </data>
  <data name="ButtonLanguageEnglish" xml:space="preserve">
    <value>🇬🇧 English</value>
  </data>
  <data name="ButtonLanguageKazakh" xml:space="preserve">
    <value>🇰🇿 Kazakh</value>
  </data>
  <data name="ButtonLanguageRussian" xml:space="preserve">
    <value>🇷🇺 Russian</value>
  </data>
  <data name="ButtonMenu" xml:space="preserve">
    <value>📋 Menu</value>
  </data>
  <data name="ButtonSetting" xml:space="preserve">
    <value>⚙️Setting</value>
  </data>
  <data name="ButtonToDoList" xml:space="preserve">
    <value>📋My lists</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>🆘 Help for TaskSlayer Heroes
You're not alone in this battle!
Here’s what you can do:

✅ /To_do_list — your list of all quests (ToDo-lists)
📋 /list — current tasks inside a list
🏆 /Award — your progress, experience, and rewards
⚙️ /Setting — your settings

🛠 Questions about the bot? Message: @dimon_tururu
Forward, hero! The world awaits your triumphs!</value>
  </data>
  <data name="LanguageSetConfirmation" xml:space="preserve">
    <value> ✅ Language has been set</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>🏰 TaskSlayer Main Menu\n\nChoose where to start:\n\n✅ /To_do_list — your to-do lists\n🏆 /Awards — your awards\n🏰 /Menu — takes you back to the menu\n⚙️ /Setting — your settings\n💙 /help — help and tips\n\n💪 Win tasks — become a hero!</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>📋 &lt;b&gt;Title&lt;/b&gt;</value>
  </data>
  <data name="RequestCreateToDoList" xml:space="preserve">
    <value>📭 You don't have any task lists yet.

Create your first one and begin your journey to productivity! ⚔️</value>
  </data>
  <data name="SelectLanguage" xml:space="preserve">
    <value>🌐 Choose a language</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Hello, friend 👋  
🎮 Welcome to TaskSlayer — your gamified Todo list!  

You are a hero in the world of tasks, and every checkbox is a victory over chaos! 🌟  

📜 How it works:  

Add tasks like quests.  
Check them off — gain XP and level up.  
Earn achievements and battle procrastination!  

⚔️ Your tools:  
✅ /To_do_list — your to-do lists  
🏆 /Awards — your rewards  
🏰 /Menu — back to main menu  
⚙️ /Setting — your settings  
💙 /help — help and tips  

🔥 Ready to become a productivity legend? Let’s go!</value>
  </data>
  <data name="WhatWouldYouChange" xml:space="preserve">
    <value>🛠 What would you like to change?</value>
  </data>
  <data name="YourLists" xml:space="preserve">
    <value>&lt;b&gt;🗂 Your lists:&lt;/b&gt;</value>
  </data>
  <data name="Goals" xml:space="preserve">
    <value>🎯 &lt;b&gt;Goals&lt;/b&gt;</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>✅ &lt;b&gt;Completed&lt;/b&gt;</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>🔄 &lt;b&gt;In progress&lt;/b&gt;</value>
  </data>
  <data name="Overdue" xml:space="preserve">
    <value>⏳ &lt;b&gt;Overdue&lt;/b&gt;</value>
  </data>
  <data name="ButtonDeleteToDoList" xml:space="preserve">
    <value>Delete List 🗑️</value>
  </data>
  <data name="AddListEnterNamePrompt" xml:space="preserve">
    <value>📝 Enter a name for your new task list.
Make it something memorable! ✨</value>
  </data>
  <data name="ListAddedSuccess" xml:space="preserve">
    <value>✅ List added successfully!  
Ready for new quests! 🚀</value>
  </data>
  <data name="ErrorInvalidNameOrTooLong" xml:space="preserve">
    <value>👮‍♂️ Halt! The name is invalid. Use only letters, numbers, and no more than 50 characters. Try again!</value>
  </data>
  <data name="ListLimitError" xml:space="preserve">
    <value>❗ Limit reached! You cannot create more than 10 lists</value>
  </data>
  <data name="DeleteListEnterNamePrompt" xml:space="preserve">
    <value>🗑 Please enter the name of the list you want to delete.</value>
  </data>
  <data name="ListDeleteedSuccess" xml:space="preserve">
    <value>✅ List successfully deleted!
Ready for new tasks! 🗂✨</value>
  </data>
  <data name="ToDoListAlreadyExists" xml:space="preserve">
    <value>⚠️ A list with this name already exists.
Please choose a different name. 📝</value>
  </data>
  <data name="ButtonEditToDoList" xml:space="preserve">
    <value>✏ Edit</value>
  </data>
  <data name="ButtonViewToDoList" xml:space="preserve">
    <value>👁 View</value>
  </data>
  <data name="ButtonDeleteToDoListMini" xml:space="preserve">
    <value>🗑️ Delete</value>
  </data>
  <data name="EditListEnterNamePrompt" xml:space="preserve">
    <value>📝 Enter a new name for the task list.</value>
  </data>
  <data name="RequestCreateCases" xml:space="preserve">
    <value>📝 You don’t have any to-do lists yet.
👉 Let’s create your first one — just tap the button below! 🚀</value>
  </data>
  <data name="ButtonADDCase" xml:space="preserve">
    <value>➕ Add task</value>
  </data>
  <data name="ButtonDeleteCase" xml:space="preserve">
    <value>Delete Task 🗑️</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>📝 &lt;b&gt;Task Status&lt;/b&gt;</value>
  </data>
  <data name="StatusOverdue" xml:space="preserve">
    <value>Overdue ❗️</value>
  </data>
  <data name="StatusCompleted" xml:space="preserve">
    <value>Completed ✅</value>
  </data>
  <data name="StatusNotCompleted" xml:space="preserve">
    <value> In Progress ⏳</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>🗓 &lt;b&gt;Due&lt;/b&gt;</value>
  </data>
  <data name="AddCaseEnterNamePrompt" xml:space="preserve">
    <value>📝 Enter a name for the new task.
Think of something memorable! ✨</value>
  </data>
  <data name="EnterTaskDueDate" xml:space="preserve">
    <value>📅 Please enter the due date for the task</value>
  </data>
  <data name="TaskCreatedSuccessfully" xml:space="preserve">
    <value>✅ Task successfully created!
Ready to get it done 💪

</value>
  </data>
  <data name="ErrorInvalidDate" xml:space="preserve">
    <value>📅 Invalid date format!
Please enter the date in the format: &lt;b&gt;dd.MM.yyyy&lt;/b&gt;
For example: &lt;i&gt;14.06.2025&lt;/i&gt;</value>
  </data>
  <data name="CaseDeleteedSuccess" xml:space="preserve">
    <value>✅ Task successfully deleted!</value>
  </data>
  <data name="AwardGranted" xml:space="preserve">
    <value>🎉 Congratulations! You've earned a new award!
🏆 Check it out with: /Award</value>
  </data>
  <data name="ButtonCompleted" xml:space="preserve">
    <value>✅Completed</value>
  </data>
  <data name="ButtonAward" xml:space="preserve">
    <value>🏆 Awards</value>
  </data>
  <data name="NoAwardsText" xml:space="preserve">
    <value>You don’t have any awards yet 🏅
Complete tasks and the rewards will come!
Every completed quest is a chance for a rare bonus ✨</value>
  </data>
  <data name="AwardsText" xml:space="preserve">
    <value>🏆 Your Awards:</value>
  </data>
  <data name="UnknownMessage" xml:space="preserve">
    <value>🤔 Hmm, I’m not sure what to do with that...
If you're lost, try using 💙 /help to get some guidance.</value>
  </data>
</root>